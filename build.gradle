/* ============================================================================
 * Build file for project 'CI-CD_EchoServerBE'
 * ============================================================================
 * This file was initial generated by EGradle
 * using 'Basic single gradle project (Java)' template
 * 
 * This is a very basic template suitable for gradle beginners and is nearly the
 * same as done by Gradle 'init' task. This generated file contains a sample 
 * Java project to get you started. In addition it will setup all necessary
 * eclipse parts also, so an out of the box import is possible.
 *
 * For more details about the java parts take a look at the Java Quickstart 
 * chapter in the Gradle user guide available at 
 * https://docs.gradle.org/current/userguide/tutorial_java_projects.html
 * ============================================================================
 */

plugins
{
	// Core functionality
	id 'base'
 	
   // Apply the java plugin to add support for Java
	id 'java'

	// Apply the eclipse plugin to add support for Eclipse
	id 'eclipse'

	// taskTree plugin
	id 'com.dorongold.task-tree'

	// gradle-docker plugins
	id 'com.palantir.docker'
	id 'com.palantir.docker-run'

	// gradle-helm-plugin plugins
	id 'org.unbroken-dome.helm'
	id 'org.unbroken-dome.helm-releases'
	id 'org.unbroken-dome.helm-publish'
	
	// ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
	id 'com.google.protobuf'
	
	// Gradle Spawn Plugin
	id 'com.wiredforcode.spawn'
	
	// Reckon versioning plugin
	// Usage: ./gradlew [TASK] -Preckon.scope=minor|major -Preckon.stage=rc|final (default is minor and first stage in the list (ordered alphabetically)) -Dorg.ajoberstar.grgit.auth.username=<token>
	id 'org.ajoberstar.reckon'

	// Grgit plugin 
	id 'org.ajoberstar.grgit'
}

dependencies {
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
	testCompile "junit:junit:${dep_junit_version}"

    // The production code uses the SLF4J logging API at compile time
	compile "org.slf4j:slf4j-api:${dep_slf4j_version}"

	// gRPC
	implementation "io.grpc:grpc-protobuf:${dep_grpc_version}"
	implementation "io.grpc:grpc-stub:${dep_grpc_version}"
	compileOnly "javax.annotation:javax.annotation-api:${dep_javax_annotation_version}"
	runtimeOnly "io.grpc:grpc-netty-shaded:${dep_grpc_version}"
}

// Load environment variables
def envVarsProps = new Properties()
file("EnvFile.properties").withInputStream { envVarsProps.load(it) }

//
// Load common build logic
//
def	commonGradleFilePath = "./${-> envVarsProps.JENKINS_SLAVE_K8S_COMMON_SUB_MODULE_NAME}/common.gradle"
apply from: "${commonGradleFilePath}"
//apply from: 'common.gradle'

// Master task that runs a complete flow (like the Jenkins Pipeline)
task AIO (dependsOn: [publishVersion,dockerBuildAndPublish,helmPackage,helmUpdate,helmTestAndClean]) { // Task 'certify' can NOT run as it can only be executed WITHIN the cluster!
	dockerBuildAndPublish.mustRunAfter publishVersion

	helmPackage.mustRunAfter dockerBuildAndPublish

	helmUpdate.mustRunAfter helmPackage

	helmTestAndClean.mustRunAfter helmUpdate
}

